# Functionality/bugs

- Implement case conversions, \L\l\u\U - at least one is used by synsedizer
- Parse non-final $ correctly/differently in BREs
- Port IPC to compiler / RTS
- Add tests for IPC functionality
- Add mode for bsd.sh that compares interpreted to compiled
  - Or just record known-good outputs for every test...

# Optimizations

## "Advanced"

* Track matched regexes until pattern space changes, check for equivalent
  regexes as well as impossible matches.
* Combine multiple regexes into a "switch" thing whenever there are multiple
  branches on matches.
* Track used groups in matches, feed back to regex compiler
* Use knowledge of regex to eliminate useless next-match calls
  - anchored at start: can't match again
  - anchored at end: first match will contain the end of the string

## Operations

Optimize out concatenation of empty strings

## Regex

* Skip retry if the regex is anchored at the start
* Finish minLength optimization:
  - Split up state entry point to have one without EOF
  - When transitioning to a state with a lower minLength, skip check
  - Precalculate minLength and store in TDFA
* Strip out failed states
  1. Identify failed states using minLength
  2. Remove all transitions to failed states
  3. Remove failed states themselves (unless that happens automatically when
     they are not mentioned and have no transitions?)
* TDFA minimization - combine equivalent states

### Abandoned

* Port search with states as in SimulateTNFA to TDFA construction
  - Turns out this was wrong. Can it even work? Let's just do the other
    optimizations :)
